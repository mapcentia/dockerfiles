#
# This Docker-compose is for deploying GC2 in a production environment.
# It requires the use of Traefik as reverse proxy.
# Docker-compose file for Traefik is included in this repository.
#
# How to:
#
# Create a file called gc2.env with these vars
#
# GC2_PASSWORD=12345
# TIMEZONE=CET
# LOCALE=en_US.UTF-8
#
# Change the traefik.http.routers.gc2core.rule=Host(`gc2.yourDomain.com`) in this file to your domain name.
#
# The run following command to deploy:
#
# $ docker-compose up
#
# There will be created named volumes for persistence.
#
# 'docker-compose down' will not remove data
# 'docker-compose down -v' will remove the volumes!!!

version: '3.8'

networks:
  web:
    external: true
  internal:
    external: false

services:
  redis:
    restart: always
    image: redis
    networks:
      - internal

  gc2core:
    restart: always
    image: mapcentia/gc2core
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
    privileged: true
    volumes:
      - gc2core_var_www_geocloud2_app_conf:/var/www/geocloud2/app/conf
      - gc2core_var_www_geocloud2_app_wms:/var/www/geocloud2/app/wms
      - gc2core_var_www_geocloud2_app_tmp:/var/www/geocloud2/app/tmp
      - gc2core_var_www_geocloud2_public_logs:/var/www/geocloud2/public/logs
      - gc2core_var_log:/var/log
      - gc2core_var_lib_php_sessions:/var/lib/php/sessions
    env_file:
      - gc2.env
    labels:
      # Create a router called gc2core listening on the websecure entrypoint
      - traefik.http.routers.gc2core.entrypoints=websecure
      - traefik.http.routers.gc2core.tls=true
      - traefik.http.routers.gc2core.rule=Host(`gc2.yourDomain.com`) # SET HOST
      - traefik.docker.network=web
      - traefik.frontend.passHostHeader=true
    networks:
      - web
      - internal

volumes:
    # gc2core
    gc2core_var_www_geocloud2_app_conf:
    gc2core_var_www_geocloud2_app_wms:
    gc2core_var_www_geocloud2_app_tmp:
    gc2core_var_www_geocloud2_public_logs:
    gc2core_var_log:
    gc2core_var_lib_php_sessions:
