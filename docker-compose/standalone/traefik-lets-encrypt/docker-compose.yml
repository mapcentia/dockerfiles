#
# This Docker-compose file is for traefik in a Docker standalone environment
#
# How to:
#
# Create a acme.json file on the host:
# $ cd cert && chmod 600 acme.json
#
# Create a user defined bridge network:
# $ docker network create web
#
# Set email and domain name below
#
# The run following command to deploy:
#
# $ docker-compose up

version: '3.8'

networks:
  web:
    external: true

services:
  traefik:
    image: traefik:v2.9.6
    command:
      - "--log.level=DEBUG"
      # Enable ACME (Let's Encrypt): automatic SSL.
      - "--certificatesresolvers.letsencrypt.acme.email=your.name@example.com" # SET EMAIL
      - "--certificatesresolvers.letsencrypt.acme.storage=./cert/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services (read-only)
      - /var/run/docker.sock:/var/run/docker.sock
      # Provide a custom config for Traefik (read-only)
      - ./traefik.yaml:/traefik.yaml:ro
      # Provide an additional configuration for local certificates
      - ./traefik-certificates-and-tls.yaml:/traefik-certificates-and-tls.yaml
      # Mount the certificate store from our local project
      - ./cert/:/cert
    networks:
      - web
    labels:
      - traefik.enable=false
      - traefik.http.routers.traefik.rule=Host(`example.com`) # SET DOMAIN NAME
      # Force TLS
      - traefik.http.routers.vidi.tls=true
